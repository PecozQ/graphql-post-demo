// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Post {
  id         Int       @id @default(autoincrement())
  title      String 
  content    String
  isPublic   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   Int       
  author     User      @relation(fields: [authorId], references: [id])
  userPostAccessDetails UserPostAccessDetails[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  posts      Post[]
  profile    Profile?
  assignedBy UserPostAccessDetails[] @relation("AssignedBy")
  assignedTo UserPostAccessDetails[] @relation("AssignedTo")
}


model UserPostAccessDetails {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation("AssignedTo", fields: [userId], references: [id])
  postId     Int
  post       Post      @relation(fields: [postId], references: [id])
  assginerId Int
  assginer   User      @relation("AssignedBy", fields: [assginerId], references: [id])
  assignedAt DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([userId, postId]) // Unique constraint
}


model Profile {
  id         Int       @id @default(autoincrement())
  bio        String    
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
}
